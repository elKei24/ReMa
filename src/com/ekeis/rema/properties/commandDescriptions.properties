#
# Copyright (c) 2016 by Elias Keis. All rights reserved.
#

cmd=Commands
cmd.storage=Transport
cmd.storage.dload=DLOAD
cmd.storage.dload.text=Loads i directly into A, increases PC by 1
cmd.storage.dload.title=DLOAD i
cmd.storage.load=LOAD
cmd.storage.load.text=CoPCes the value of Rx to A, increaces PC by 1
cmd.storage.load.title=LOAD x
cmd.storage.store=STORE
cmd.storage.store.text=CoPCes the value of A into Rx, increases PC by 1
cmd.storage.store.title=STORE x
cmd.math.add=ADD
cmd.math.add.title=ADD x
cmd.math.add.text=Adds the value of Rx to the value of A, stores the result \
in A, increases PC by 1
cmd.math.sub=SUB
cmd.math.sub.title=SUB x
cmd.math.sub.text=Subtracts the value of Rx from the value of A, stores the \
result in A, increases PC by 1
cmd.math.mult=MULT
cmd.math.mult.title=MULT x
cmd.math.mult.text=Multiplies the value of Rx with the value of A, stores the \
result in A, increases PC by 1
cmd.math=Arithmetic
cmd.math.div=DIV
cmd.math.div.title=DIV x
cmd.math.div.text=Divides the value of A by the value of Rx (integer division without rest), stores the result \
in A, increases PC by 1
cmd.jump=Jumps
cmd.jump.jump=JUMP
cmd.jump.jump.title=JUMP n
cmd.jump.jump.text=Loads the number n into PC, program continues with command n.\
The jump has no condition.
cmd.jump.jge=JGE
cmd.jump.jge.title=JGE n
cmd.jump.jge.text=Loads the number n into PC, if the value of A is greater or equal 0, or increases PC by 1 otherwise.
cmd.jump.jgt=JGT
cmd.jump.jgt.title=JGT n
cmd.jump.jgt.text=Loads the number n into PC, if the value of A is greater than 0, or increases PC by 1 otherwise.
cmd.jump.jle=JLE
cmd.jump.jle.title=JLE n
cmd.jump.jle.text=Loads the number n into PC, if the value of A is less or equal 0, or increases PC by 1 otherwise.
cmd.jump.jlt=JLT
cmd.jump.jlt.title=JLT n
cmd.jump.jlt.text=Loads the number n into PC, if the value of A is less than 0, or increases PC by 1 otherwise.
cmd.jump.jeq=JEQ
cmd.jump.jeq.title=JEQ n
cmd.jump.jeq.text=Loads the number n into PC, if the value of A is equal 0, or increases PC by 1 otherwise.
cmd.jump.jne=JNE
cmd.jump.jne.title=JNE n
cmd.jump.jne.text=Loads the number n into PC, if the value of A is not equal 0, or increases PC by 1 otherwise.
cmd.end=END
cmd.end.title=END
cmd.end.text=Increases the value of PC by 1 and stops the program.
cmd.debug.log=LOG
cmd.debug.log.title=LOG msg
cmd.debug.log.text=Shows msg in the log and increases PC by 1. May be useful to understand what the \
machine does, but is actually not part of the language.
cmd.debug.pause=PAUSE
cmd.debug.pause.title=PAUSE
cmd.debug.pause.text=Stops the machine from running so that you can go on using \
single steps and increases PC by 1. May be useful for debugging but is actually \
not part of the language.
cmd.debug=Debugging
cmd.debug.comment=Comments
cmd.debug.comment.title=Comments
cmd.debug.comment.text=Use '#', '--' or '//' in order to add comments.\n\
Actually, comments are no commands and will be completely \
ignored. There is no line number in front of a comment.
cmd.bitvise=Bitwise
cmd.bitvise.not=NOT
cmd.bitvise.not.title=NOT
cmd.bitvise.not.text=Performs a logical negation on each bit in Akku and \
increases IP by 1.
cmd.bitvise.and.title=AND x
cmd.bitvise.and=AND
cmd.bitvise.and.text=Performs a logical AND operation on the bits in A and Rx and \
increases PI by 1.\nA bit of the result is 1, if both \
corresponding bits in A and Rx are 1, too.
cmd.bitvise.or.title=OR x
cmd.bitvise.or=OR
cmd.bitvise.or.text=Performs a logical inclusive OR operation on the bits in A \
and Rx and increases PI by 1.\nA bit of the result is 1, if \
at least one of the two corresponding bits in A and Rx is 1, \
too.
cmd.bitvise.xor.title=XOR x
cmd.bitvise.xor=XOR
cmd.bitvise.xor.text=Performs a logical exclusive OR operation on the bits in \
A and Rx and increases IP by 1.\nA bit of the result is 1, \
if exactly one of the two corresponding bits in A and Rx is \
1, too.
cmd.bitvise.asl.title=ASL
cmd.bitvise.asl=ASL
cmd.bitvise.asl.text=Performs a left arithmetic shift in A and increases IP by 1.\n\
"ASL" stands for "Arithmetic Shift Left". This operation \
equals a multiplication by 2. Left arithmetic shift equals\
left logical shift.
cmd.bitvise.asr.text=Performs a right arithmetic shift in A and increases IP by 1.\n\
"ASR" stands for "Arithmetic Shift Right". This operation \
equals a division by 2 and rounding towards negative infinity. \
In contrast to right logical shift, right arithmetic shift \
will not always shift 0 into the rightmost position but will \
preserve the sign of the number by copying the leftmost bit.
cmd.bitvise.asr.title=ASR
cmd.bitvise.asr=ASR
cmd.bitvise.lsr.text=Performs a right logical shift in A and increases IP by 1.\n\
"LSR" stands for "Logical Shift Right". This operation \
equals a division by 2 and rounding towards negative infinity \
if using a unsigned number. Anyway, this register machine only \
uses signed numbers. In contrast to right arithmetic shift, \
right logical shift will always shift 0 into the rightmost \
position but will and not preserve the sign of the number.
cmd.bitvise.lsr.title=LSR
cmd.bitvise.lsr=LSR